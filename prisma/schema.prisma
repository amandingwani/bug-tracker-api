// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // directUrl = env("DIRECT_URL")
  // If you want to use Prisma Migrate, you will need to manually create a shadow database
  // https://neon.tech/docs/guides/prisma-migrate#configure-a-shadow-database-for-prisma-migrate
  // make sure to append ?connect_timeout=10 to the connection string
  // shadowDatabaseUrl = env(“SHADOW_DATABASE_URL”)
}

model User {
  id              Int       @id @default(autoincrement())
  registered      Boolean   @default(true)
  google_id_sub   String?   @unique
  email           String    @unique
  firstName       String
  lastName        String?
  picture         String?
  createdTickets  Ticket[]  @relation(name: "CreatedTickets")
  assignedTickets Ticket[]  @relation(name: "AssignedTickets")
  createdProjects Project[] @relation(name: "CreatedProjects")
  otherProjects   Project[] @relation(name: "OtherProjects")
  comments        Comment[]
  createdAt       DateTime  @default(now())
}

model Project {
  id           Int           @id @default(autoincrement())
  name         String
  description  String?
  owner        User          @relation("CreatedProjects", fields: [ownerId], references: [id])
  ownerId      Int
  status       ProjectStatus @default(OPEN)
  contributors User[]        @relation("OtherProjects")
  tickets      Ticket[]
  createdAt    DateTime      @default(now())
}

model Ticket {
  id          Int            @id @default(autoincrement())
  title       String
  description String?
  author      User           @relation(name: "CreatedTickets", fields: [authorId], references: [id])
  authorId    Int
  assignee    User?          @relation(name: "AssignedTickets", fields: [assigneeId], references: [id])
  assigneeId  Int?
  type        TicketType     @default(BUG)
  priority    TicketPriority @default(NORMAL)
  status      TicketStatus   @default(OPEN)
  createdAt   DateTime       @default(now())
  project     Project        @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId   Int
  comments    Comment[]
}

model Comment {
  id        Int      @id @default(autoincrement())
  author    User     @relation(fields: [authorId], references: [id])
  authorId  Int
  ticket    Ticket   @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  ticketId  Int
  message   String
  createdAt DateTime @default(now())
}

enum ProjectStatus {
  OPEN // The project is in the planning or early stages.
  IN_PROGRESS // Work is actively being done on the project.
  ON_HOLD // The project is temporarily paused or delayed.
  COMPLETED // The project has been finished successfully.
  CANCELED // The project has been abandoned or canceled.
  TESTING // The project is in the testing phase.
  DEPLOYED // The project has been deployed to production.
}

enum TicketType {
  BUG
  TASK
}

enum TicketPriority {
  URGENT
  HIGH
  NORMAL
  LOW
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  TO_BE_TESTED
  CLOSED
}
